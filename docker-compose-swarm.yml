version: '3'
services:
  webserver:
    image: masu.speag.com/simcore/dag/webserver:1.0
    ports:
      - '9081:8080'
    deploy:
      placement:
        constraints: 
          - node.platform.os == linux
          - node.role == manager
    environment:
      - RABBITMQ_DEFAULT_USER=simcore
      - RABBITMQ_DEFAULT_PASS=simcore
  rabbit:
    image: rabbitmq:3-management
    environment:
      - RABBITMQ_DEFAULT_USER=simcore
      - RABBITMQ_DEFAULT_PASS=simcore
    ports:
      - "15672:15672"
    deploy:
      placement:
        constraints: 
          - node.platform.os == linux
          - node.role == manager
  flower:
    image: ondrejit/flower:latest
    command: --broker=amqp://simcore:simcore@rabbit:5672
    ports:
      - 5555:5555
    depends_on:
      - rabbit
    deploy:
      placement:
        constraints: 
          - node.platform.os == linux
          - node.role == manager
  sidecar:
    image: masu.speag.com/simcore/dag/sidecar:1.0
    ports:
      - "8000:8000"
    environment:
      - RABBITMQ_USER=simcore
      - RABBITMQ_PASSWORD=simcore
    depends_on:
      - rabbit
    deploy:
      placement:
        constraints: 
          - node.platform.os == linux
          - node.role == manager
  postgres:
    restart: always
    image: postgres:10-alpine
    environment:
      POSTGRES_USER: simcore
      POSTGRES_PASSWORD: simcore
      POSTGRES_DB: simcoredb
#      - POSTGRES_USER=${POSTGRES_USER}
#      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
#      - POSTGRES_DB=${POSTGRES_DB}
#    volumes:
#      - postgres:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    deploy:
      placement:
        constraints: 
          - node.platform.os == linux
          - node.role == manager
  adminer:
    image: adminer
    restart: always
    ports:
      - 8080:8080
    depends_on:
      - postgres
    deploy:
      placement:
        constraints: 
          - node.platform.os == linux
          - node.role == manager
  portainer:
    image: portainer/portainer
    ports:
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    deploy:
      placement:
        constraints: [node.role == manager]
volumes:
  input:
  output:
  log:
  postgres: