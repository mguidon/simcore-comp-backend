version: '3'
services:
  client-qx:
    build:
      context: .
      dockerfile: ./client-qx/Dockerfile
    volumes:
      - ./client-qx:/home/node/qxapp
  webserver:
    build:
      context: .
      dockerfile: ./server-py-aiohttp/Dockerfile
      args:
        serverdir: server-py-aiohttp
    ports:
      - '9081:8080'
    environment:
      - SIMCORE_WEB_CONFIG=production
      - PYTHONPATH=/usr/src/packages/simcore-sdk/src
    volumes:
      - ./server-py-aiohttp:/usr/src/app
      - ../packages:/usr/src/packages
      - ./client-qx/source-output:/usr/src/app/client
    depends_on: 
      - client-qx
  rabbit:
    image: rabbitmq:3-management
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    ports:
      - "15672:15672"
#  flower:
#    image: ondrejit/flower:latest
#    command: --broker=amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@rabbit:5672
#    ports:
#      - 5555:5555
#    depends_on:
#      - rabbit
  sidecar:
    build:
      context: .
      dockerfile: ./sidecar/Dockerfile
    volumes:
      - input:/input
      - output:/output
      - log:/log
      - ./sidecar/src/sidecar:/work/sidecar
      - ../packages:/work/packages
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "8000:8000"
      - "3000:3000"
    environment:
      - PYTHONPATH=/work/packages
    environment:
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - S3_ENDPOINT=${S3_ENDPOINT}
      - S3_ACCESS_KEY=${S3_ACCESS_KEY}
      - S3_SECRET_KEY=${S3_SECRET_KEY}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}
    depends_on:
      - rabbit
  postgres:
    restart: always
    image: postgres:10
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres:/var/lib/postgresql/data
    ports:
      - "5432:5432"
  adminer:
    image: adminer
    restart: always
    ports:
      - 8080:8080
    depends_on:
      - postgres
volumes:
  input:
  output:
  log:
  postgres: